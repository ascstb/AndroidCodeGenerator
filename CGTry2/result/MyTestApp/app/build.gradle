plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.parcelize'
    id 'kotlin-kapt'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.r2devpros.mytestapp"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    applicationVariants.all { variant ->
        variant.resValue "string", "app_version_name", "${defaultConfig.versionName}"
        variant.resValue "string", "app_version", "${defaultConfig.versionName} - ${variant.versionCode}"
    }

    buildTypes {
        debug {
            minifyEnabled false
            versionNameSuffix "-${gitBranch()}"
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "mytestapp.stage"
    productFlavors {
        dev {
            dimension "mytestapp.stage"
            resValue "string", "app_name", "DEV - MyTestApp"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            getProps("$projectDir.absolutePath/config/dev.properties").each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
        production {
            dimension "mytestapp.stage"
            resValue "string", "app_name", "MyTestApp"
            applicationIdSuffix ""
            getProps("$projectDir.absolutePath/config/production.properties").each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    //region default
    implementation "androidx.core:core-ktx:$androidXCore"
    implementation "androidx.appcompat:appcompat:$appCompat"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"
    testImplementation "junit:junit:$jUnit"
    androidTestImplementation "androidx.test.ext:junit:$jUnitAndroidTestImplementation"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    //endregion

    //region timber
    implementation "com.jakewharton.timber:timber:$timber"
    //end region

    //region RecyclerView & CardView
    implementation "com.android.support:recyclerview-v7:$recyclerview"
    implementation "com.android.support:cardview-v7:$recyclerview"
    implementation "com.android.support:gridlayout-v7:$recyclerview"
    implementation "com.android.support:design:$supportLibrary"
    //endregion

    //region ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:1.5.21"
    //endregion


    //region Kotlin and Coroutines
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.21"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.5.21"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesAndroid"
    //endregion

    //region Retrofit
    implementation "com.squareup.okhttp3:okhttp:$okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$retrofitCoroutines"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitMoshi"
    //endregion

    //region Koin
    implementation "org.koin:koin-core:$koin"
    implementation "org.koin:koin-core-ext:$koin"
    implementation "org.koin:koin-androidx-scope:$koin"
    implementation "org.koin:koin-androidx-viewmodel:$koin"
    //endregion

    //region Glide
    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"
    //endregion

    //region Room
    kapt "android.arch.persistence.room:compiler:$room"
    implementation "android.arch.persistence.room:runtime:$room"
    annotationProcessor "android.arch.persistence.room:compiler:$room"
    //endregion
}

static def gitBranch() {
    def branch = ""
    def proc = "git symbolic-ref -q --short HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    if (branch == "") {
        branch = System.getenv('GIT_BRANCH')
    }
    if (branch == null) {
        branch = ""
    }
    def branchName = branch.replace("/", "_")
    branchName.replace("origin_", "")
}
