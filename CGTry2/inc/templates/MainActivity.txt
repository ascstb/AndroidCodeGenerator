package {{packageName}}.presentation

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.graphics.drawable.Drawable
import android.os.Bundle
import android.view.KeyEvent
import android.view.View
import androidx.databinding.library.baseAdapters.BR
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import {{packageName}}.R
import {{packageName}}.core.*
import {{packageName}}.presentation.base.BaseActivity
import org.koin.androidx.viewmodel.ext.android.viewModel
import timber.log.Timber
import java.util.*

class MainActivity : BaseActivity() {
    private val viewModel by viewModel<{{model}}ViewModel>()

    //region events
    override fun onCreate(savedInstanceState: Bundle?) {
        Timber.d("MainActivity_TAG: onCreate: ")
        super.onCreate(savedInstanceState)

        setBinding(this, R.layout.main_activity_layout, viewModel)
        
        /*if (!isConnectedToInternet()) {
            navigation.navigateToNoInternet(this)
        }*/

        wireOnPropertyChanged()
        getApiInfo()
    }
    //endregion

    //region functions
    private fun wireOnPropertyChanged() {
        //TODO: what you want to happen once a property in the view model changes its value
    }

    private fun getApiInfo() {
        Timber.d("MainActivity_TAG: onGetApiInfo: ")
        viewModel.getAvailable{{model}}Async()
    }
    //endregion
}
